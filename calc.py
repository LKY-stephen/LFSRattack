import matrix

def dot(A,B):
	n=len(A);
	m=len(B)
	cal=0
	temp=[]
	answer=[[] for i in range(n)]
	for i in range(n):
		for j in range(m):
			for k in range(m):
				cal^=A[i][k]&B[k][j]
			temp.append(cal)
			cal=0
		answer[i]=temp
		temp=[]
	return answer
	
	
def printmatrix(matrix):
	for i in range(0,len(matrix)):
		print matrix[i]

def gfunc(n,temp):
	temp=calculat(n,matrix.matrix30,temp)
	output=[]
	#print temp
	for i in range(30):
		output.append(temp[i][1]^temp[i][13]^(temp[i][13]&temp[i][1]))
	for i in range(30):
		for j in range(i+1,30):
			output.append((temp[i][1]&temp[j][13])^(temp[i][13]&temp[j][1]))
	return output,temp

	
def calculat(n,matrixcalc,temp):
	for i in range(0,n):
		temp=dot(temp,matrixcalc)
	return temp

def solve( ma):
	#printmatrix(ma)
	global m; m = ma 
	n = len( m )
	n2=len(m[1])
	print n,len(m[1])
	i = 0; j = 0; row_pos = 0; col_pos = 0; ik = 0; 
	mik = True;    
	while( ( row_pos < n ) and( col_pos < n2 ) ):
		mik=True
		ik=row_pos
		for i in range( row_pos, n ):  
			if m[i][col_pos] :  
				mik = False
				ik = i  
				break
		if mik:  
			col_pos = col_pos + 1
			continue  
		if( ik != row_pos ):  
			m[row_pos],m[ik]=m[ik],m[row_pos]
		for i in range(0,n):
			if i != row_pos and m[i][col_pos]:  
				j = n2-1   
				while( j >= col_pos ):  
					m[i][j] ^=m[row_pos][j]  
					j = j - 1   
		row_pos = row_pos + 1; col_pos = col_pos + 1  
	return 1  



	
output
length=len(output)
count=-1
j=0
temp=matrix.matrix30
calcuarr=[[] for i in range(1000)]
answer=[]



for i in range(length):
	count+=1
	if output[i]=='1':
		answer,temp=gfunc(count,temp)
		count =0
		answer.append(1)
		# print answer
		calcuarr[j]=answer
		j+=1
solve(calcuarr)
# print m[:30]
for i in range( 0, 30):  
	 print "x[%d] = %d" % (i, m[i][len( m[1])-1])  	


	
	
# printmatrix(matrix.matrix30)
# printmatrix(matrix.matrix50)
# printmatrix(matrix.matrix100)

{ 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1 };